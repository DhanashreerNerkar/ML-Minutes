<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Regularization in Machine Learning</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #2c3e50;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 25px;
            padding: 40px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }
        h1 {
            text-align: center;
            color: #667eea;
            font-size: 2.8em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }
        .subtitle {
            text-align: center;
            color: #7f8c8d;
            margin-bottom: 40px;
            font-size: 1.2em;
        }
        .concept-box {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            border-radius: 20px;
            padding: 30px;
            margin: 30px 0;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        .visual-comparison {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
            margin: 30px 0;
        }
        .model-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
            transition: transform 0.3s;
            border-top: 4px solid #667eea;
        }
        .model-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 40px rgba(0,0,0,0.15);
        }
        .underfitting {
            border-top-color: #3498db;
        }
        .justright {
            border-top-color: #27ae60;
        }
        .overfitting {
            border-top-color: #e74c3c;
        }
        .chart-container {
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin: 30px auto;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            max-width: 600px;
        }
        .formula-box {
            background: #2c3e50;
            color: #ecf0f1;
            padding: 20px;
            border-radius: 15px;
            font-family: 'Courier New', monospace;
            margin: 20px 0;
            overflow-x: auto;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        .regularization-type {
            background: white;
            border-radius: 15px;
            padding: 25px;
            margin: 20px 0;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
            border-left: 5px solid #667eea;
        }
        .interactive-demo {
            background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
            border-radius: 20px;
            padding: 30px;
            margin: 30px 0;
            text-align: center;
        }
        button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 25px;
            font-size: 16px;
            cursor: pointer;
            margin: 10px;
            transition: transform 0.3s, box-shadow 0.3s;
        }
        button:hover {
            transform: scale(1.1);
            box-shadow: 0 5px 20px rgba(0,0,0,0.3);
        }
        .slider-container {
            margin: 20px auto;
            max-width: 500px;
            background: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .slider {
            width: 100%;
            height: 40px;
            -webkit-appearance: none;
            background: linear-gradient(90deg, #3498db 0%, #e74c3c 100%);
            border-radius: 20px;
            outline: none;
            opacity: 0.8;
            transition: opacity 0.2s;
        }
        .slider:hover {
            opacity: 1;
        }
        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 25px;
            height: 25px;
            background: white;
            cursor: pointer;
            border-radius: 50%;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
        }
        .example-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 25px;
            margin: 30px 0;
        }
        .real-world-example {
            background: linear-gradient(135deg, #ffeaa7 0%, #fdcb6e 100%);
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
        }
        .highlight {
            background: linear-gradient(135deg, #74b9ff 0%, #a29bfe 100%);
            color: white;
            padding: 3px 10px;
            border-radius: 15px;
            font-weight: bold;
            display: inline-block;
            margin: 2px;
        }
        .warning-box {
            background: #fff3cd;
            border-left: 5px solid #ffc107;
            padding: 20px;
            margin: 20px 0;
            border-radius: 10px;
        }
        .success-box {
            background: #d4edda;
            border-left: 5px solid #28a745;
            padding: 20px;
            margin: 20px 0;
            border-radius: 10px;
        }
        .comparison-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .comparison-table th {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px;
            text-align: left;
        }
        .comparison-table td {
            padding: 12px 15px;
            border-bottom: 1px solid #ecf0f1;
            background: white;
        }
        .comparison-table tr:hover td {
            background: #f5f6fa;
        }
        .metric-box {
            display: inline-block;
            background: white;
            padding: 15px 25px;
            margin: 10px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            transition: transform 0.3s;
        }
        .metric-box:hover {
            transform: translateY(-5px);
        }
        .metric-label {
            color: #667eea;
            font-weight: bold;
            font-size: 0.9em;
        }
        .metric-value {
            font-size: 1.5em;
            color: #2c3e50;
            margin-top: 5px;
        }
        .code-example {
            background: #2c3e50;
            color: #ecf0f1;
            padding: 20px;
            border-radius: 10px;
            font-family: 'Courier New', monospace;
            margin: 20px 0;
            overflow-x: auto;
        }
        .before-after {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin: 20px 0;
        }
        .before, .after {
            padding: 20px;
            border-radius: 15px;
            text-align: center;
        }
        .before {
            background: #ffebee;
            border: 2px solid #ef5350;
        }
        .after {
            background: #e8f5e9;
            border: 2px solid #66bb6a;
        }
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        .animated {
            animation: pulse 2s infinite;
        }
        .lambda-display {
            text-align: center;
            font-size: 1.5em;
            color: #667eea;
            margin: 10px 0;
            font-weight: bold;
        }
        .arrow-down {
            font-size: 2em;
            color: #667eea;
            text-align: center;
            margin: 20px 0;
            animation: pulse 1.5s infinite;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéØ Regularization in Machine Learning</h1>
        <p class="subtitle">Preventing Overfitting & Building Robust Models</p>

        <div class="concept-box">
            <h2 style="color: #667eea; margin-bottom: 20px;">ü§î What is Regularization?</h2>
            <p style="font-size: 1.1em; line-height: 1.8;">
                <strong>Regularization</strong> is like a <span class="highlight">complexity penalty</span> for your model. 
                It prevents your model from becoming too complex by adding a penalty term to the loss function.
            </p>
            <div style="text-align: center; margin: 30px 0;">
                <h3>The Big Idea:</h3>
                <p style="font-size: 1.2em; margin-top: 15px;">
                    <strong>Without Regularization:</strong> Minimize Error Only<br>
                    <span style="font-size: 2em;">‚Üì</span><br>
                    <strong>With Regularization:</strong> Minimize Error + Complexity Penalty
                </p>
            </div>
        </div>

        <h2 style="text-align: center; color: #667eea; margin: 40px 0;">üìä The Overfitting Problem Visualized</h2>
        
        <div class="visual-comparison">
            <div class="model-card underfitting">
                <h3 style="color: #3498db;">üìâ Underfitting</h3>
                <p><strong>Model:</strong> Too Simple (Linear)</p>
                <ul style="margin-top: 15px;">
                    <li>‚ùå High training error</li>
                    <li>‚ùå High test error</li>
                    <li>Can't capture patterns</li>
                    <li>High bias</li>
                </ul>
                <div style="text-align: center; margin-top: 20px;">
                    <div style="font-size: 3em;">üò¥</div>
                    <p>"I'm too lazy to learn"</p>
                </div>
            </div>
            
            <div class="model-card justright">
                <h3 style="color: #27ae60;">‚ú® Just Right</h3>
                <p><strong>Model:</strong> Balanced Complexity</p>
                <ul style="margin-top: 15px;">
                    <li>‚úÖ Low training error</li>
                    <li>‚úÖ Low test error</li>
                    <li>Captures true patterns</li>
                    <li>Generalizes well</li>
                </ul>
                <div style="text-align: center; margin-top: 20px;">
                    <div style="font-size: 3em;">üòä</div>
                    <p>"I learned the concept!"</p>
                </div>
            </div>
            
            <div class="model-card overfitting">
                <h3 style="color: #e74c3c;">üìà Overfitting</h3>
                <p><strong>Model:</strong> Too Complex</p>
                <ul style="margin-top: 15px;">
                    <li>‚úÖ Very low training error</li>
                    <li>‚ùå High test error</li>
                    <li>Memorizes noise</li>
                    <li>High variance</li>
                </ul>
                <div style="text-align: center; margin-top: 20px;">
                    <div style="font-size: 3em;">ü§Ø</div>
                    <p>"I memorized everything!"</p>
                </div>
            </div>
        </div>

        <div class="interactive-demo">
            <h2>üéÆ Interactive Demo: See Regularization in Action!</h2>
            <p>Adjust the regularization strength and watch how the model changes</p>
            
            <div class="slider-container">
                <label><strong>Regularization Strength (Œª):</strong></label>
                <div class="lambda-display" id="lambdaValue">Œª = 0.00</div>
                <input type="range" class="slider" id="regSlider" min="0" max="100" value="0">
                
                <div style="display: flex; justify-content: space-between; margin-top: 10px;">
                    <span>No Regularization</span>
                    <span>Strong Regularization</span>
                </div>
            </div>
            
            <div class="chart-container">
                <canvas id="regChart"></canvas>
            </div>
            
            <div style="margin-top: 20px;">
                <div class="metric-box">
                    <div class="metric-label">Training Error</div>
                    <div class="metric-value" id="trainError">0.05</div>
                </div>
                <div class="metric-box">
                    <div class="metric-label">Test Error</div>
                    <div class="metric-value" id="testError">0.25</div>
                </div>
                <div class="metric-box">
                    <div class="metric-label">Model Complexity</div>
                    <div class="metric-value" id="complexity">High</div>
                </div>
            </div>
        </div>

        <h2 style="text-align: center; color: #667eea; margin: 40px 0;">üìö Types of Regularization</h2>

        <div class="regularization-type">
            <h3>1Ô∏è‚É£ L1 Regularization (Lasso)</h3>
            <div class="formula-box">
                Loss = Original Loss + Œª √ó Œ£|weights|
            </div>
            <div class="before-after">
                <div>
                    <h4>Characteristics:</h4>
                    <ul style="text-align: left; margin-top: 15px;">
                        <li>Creates <span class="highlight">sparse models</span></li>
                        <li>Forces some weights to exactly 0</li>
                        <li>Automatic feature selection</li>
                        <li>Diamond-shaped constraint region</li>
                    </ul>
                </div>
                <div>
                    <h4>Use When:</h4>
                    <ul style="text-align: left; margin-top: 15px;">
                        <li>You have many features</li>
                        <li>You suspect only few are important</li>
                        <li>You want interpretable models</li>
                        <li>Need automatic feature selection</li>
                    </ul>
                </div>
            </div>
            
            <div class="real-world-example">
                <h4>üè• Real Example: Medical Diagnosis</h4>
                <p>100 symptoms ‚Üí L1 identifies only 10 relevant ones for disease prediction</p>
            </div>
        </div>

        <div class="regularization-type">
            <h3>2Ô∏è‚É£ L2 Regularization (Ridge)</h3>
            <div class="formula-box">
                Loss = Original Loss + Œª √ó Œ£(weights¬≤)
            </div>
            <div class="before-after">
                <div>
                    <h4>Characteristics:</h4>
                    <ul style="text-align: left; margin-top: 15px;">
                        <li>Shrinks weights <span class="highlight">proportionally</span></li>
                        <li>Never makes weights exactly 0</li>
                        <li>Handles correlated features well</li>
                        <li>Circular constraint region</li>
                    </ul>
                </div>
                <div>
                    <h4>Use When:</h4>
                    <ul style="text-align: left; margin-top: 15px;">
                        <li>All features are relevant</li>
                        <li>Features are correlated</li>
                        <li>Want to prevent large weights</li>
                        <li>Multicollinearity issues</li>
                    </ul>
                </div>
            </div>
            
            <div class="real-world-example">
                <h4>üè† Real Example: House Price Prediction</h4>
                <p>All features (size, location, age) matter ‚Üí L2 keeps all but reduces their impact</p>
            </div>
        </div>

        <div class="regularization-type">
            <h3>3Ô∏è‚É£ Elastic Net (L1 + L2 Combined)</h3>
            <div class="formula-box">
                Loss = Original Loss + Œª‚ÇÅ √ó Œ£|weights| + Œª‚ÇÇ √ó Œ£(weights¬≤)
            </div>
            <div class="before-after">
                <div>
                    <h4>Characteristics:</h4>
                    <ul style="text-align: left; margin-top: 15px;">
                        <li>Best of both worlds</li>
                        <li>Feature selection + shrinkage</li>
                        <li>Two hyperparameters to tune</li>
                        <li>More flexible</li>
                    </ul>
                </div>
                <div>
                    <h4>Use When:</h4>
                    <ul style="text-align: left; margin-top: 15px;">
                        <li>Many correlated features</li>
                        <li>High-dimensional data</li>
                        <li>Want balanced approach</li>
                        <li>Complex feature relationships</li>
                    </ul>
                </div>
            </div>
            
            <div class="real-world-example">
                <h4>üß¨ Real Example: Gene Expression Analysis</h4>
                <p>Thousands of genes ‚Üí Elastic Net selects important ones while handling correlations</p>
            </div>
        </div>

        <h2 style="text-align: center; color: #667eea; margin: 40px 0;">üéØ How Regularization Prevents Overfitting</h2>

        <div class="concept-box">
            <h3>The Intuition: "Occam's Razor for ML"</h3>
            <p style="margin-top: 20px; font-size: 1.1em;">
                <strong>Principle:</strong> Among competing models that perform equally well, choose the simplest one.
            </p>
            
            <div style="display: grid; grid-template-columns: 1fr auto 1fr; gap: 20px; margin: 30px 0; align-items: center;">
                <div class="before">
                    <h4>Without Regularization</h4>
                    <p>Model: y = 0.5x‚Å∑ - 3.2x‚Å∂ + 8.1x‚Åµ - 2.4x‚Å¥ + ...</p>
                    <p style="margin-top: 10px;">ü§Ø Complex polynomial</p>
                </div>
                <div class="arrow-down">‚Üí</div>
                <div class="after">
                    <h4>With Regularization</h4>
                    <p>Model: y = 2.3x + 0.1x¬≤ + 5.2</p>
                    <p style="margin-top: 10px;">üòä Simple, generalizable</p>
                </div>
            </div>
        </div>

        <h2 style="text-align: center; color: #667eea; margin: 40px 0;">üìä Comparison Table</h2>

        <table class="comparison-table">
            <thead>
                <tr>
                    <th>Aspect</th>
                    <th>L1 (Lasso)</th>
                    <th>L2 (Ridge)</th>
                    <th>Elastic Net</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><strong>Penalty Type</strong></td>
                    <td>Sum of absolute values</td>
                    <td>Sum of squares</td>
                    <td>Both L1 and L2</td>
                </tr>
                <tr>
                    <td><strong>Feature Selection</strong></td>
                    <td>‚úÖ Yes (sets to 0)</td>
                    <td>‚ùå No (only shrinks)</td>
                    <td>‚úÖ Yes (like L1)</td>
                </tr>
                <tr>
                    <td><strong>Handling Correlated Features</strong></td>
                    <td>Picks one randomly</td>
                    <td>Keeps all</td>
                    <td>Groups them</td>
                </tr>
                <tr>
                    <td><strong>Computational Cost</strong></td>
                    <td>Higher</td>
                    <td>Lower</td>
                    <td>Highest</td>
                </tr>
                <tr>
                    <td><strong>When to Use</strong></td>
                    <td>Sparse data, interpretability</td>
                    <td>Multicollinearity</td>
                    <td>High dimensions</td>
                </tr>
            </tbody>
        </table>

        <h2 style="text-align: center; color: #667eea; margin: 40px 0;">üíª Code Examples</h2>

        <div class="code-example">
<pre>
# Python: Regularization with scikit-learn

from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet
from sklearn.model_selection import train_test_split
import numpy as np

# Generate sample data
X = np.random.randn(100, 20)  # 100 samples, 20 features
y = X[:, 0] * 2 + X[:, 1] * 3 + np.random.randn(100) * 0.1

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# 1. No Regularization (Standard Linear Regression)
linear_model = LinearRegression()
linear_model.fit(X_train, y_train)
print(f"Linear R¬≤: {linear_model.score(X_test, y_test):.3f}")

# 2. L2 Regularization (Ridge)
ridge_model = Ridge(alpha=1.0)  # alpha is the regularization strength (Œª)
ridge_model.fit(X_train, y_train)
print(f"Ridge R¬≤: {ridge_model.score(X_test, y_test):.3f}")

# 3. L1 Regularization (Lasso)
lasso_model = Lasso(alpha=0.1)
lasso_model.fit(X_train, y_train)
print(f"Lasso R¬≤: {lasso_model.score(X_test, y_test):.3f}")
print(f"Non-zero coefficients: {np.sum(lasso_model.coef_ != 0)}/20")

# 4. Elastic Net (L1 + L2)
elastic_model = ElasticNet(alpha=0.1, l1_ratio=0.5)  # l1_ratio controls mix
elastic_model.fit(X_train, y_train)
print(f"Elastic Net R¬≤: {elastic_model.score(X_test, y_test):.3f}")

# Choosing optimal lambda using Cross-Validation
from sklearn.linear_model import RidgeCV

# Try multiple alpha values
alphas = [0.001, 0.01, 0.1, 1.0, 10.0, 100.0]
ridge_cv = RidgeCV(alphas=alphas, cv=5)
ridge_cv.fit(X_train, y_train)
print(f"Best alpha: {ridge_cv.alpha_}")
</pre>
        </div>

        <h2 style="text-align: center; color: #667eea; margin: 40px 0;">üéØ How to Choose Regularization Strength (Œª)</h2>

        <div class="concept-box">
            <h3>Cross-Validation Approach</h3>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-top: 20px;">
                <div style="text-align: center;">
                    <div style="font-size: 3em;">üìä</div>
                    <h4>1. Try Multiple Œª Values</h4>
                    <p>Œª = [0.001, 0.01, 0.1, 1, 10, 100]</p>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 3em;">üîÑ</div>
                    <h4>2. Cross-Validate Each</h4>
                    <p>5-fold or 10-fold CV</p>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 3em;">üìà</div>
                    <h4>3. Plot Validation Curve</h4>
                    <p>Error vs Œª</p>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 3em;">‚úÖ</div>
                    <h4>4. Choose Best Œª</h4>
                    <p>Lowest validation error</p>
                </div>
            </div>
        </div>

        <h2 style="text-align: center; color: #667eea; margin: 40px 0;">üåç Real-World Applications</h2>

        <div class="example-grid">
            <div class="real-world-example">
                <h3>üì± Text Classification (Spam Detection)</h3>
                <p><strong>Problem:</strong> 10,000+ word features</p>
                <p><strong>Solution:</strong> L1 regularization selects only relevant words</p>
                <p><strong>Result:</strong> From 10,000 features ‚Üí 500 important ones</p>
            </div>
            
            <div class="real-world-example">
                <h3>üì∏ Image Recognition</h3>
                <p><strong>Problem:</strong> Millions of pixel values</p>
                <p><strong>Solution:</strong> L2 regularization in neural networks (weight decay)</p>
                <p><strong>Result:</strong> Prevents memorizing training images</p>
            </div>
            
            <div class="real-world-example">
                <h3>üíπ Stock Price Prediction</h3>
                <p><strong>Problem:</strong> Hundreds of correlated indicators</p>
                <p><strong>Solution:</strong> Elastic Net handles correlation + selection</p>
                <p><strong>Result:</strong> Robust predictions without overfitting to historical data</p>
            </div>
            
            <div class="real-world-example">
                <h3>üè• Disease Risk Prediction</h3>
                <p><strong>Problem:</strong> Many clinical measurements</p>
                <p><strong>Solution:</strong> Lasso identifies key risk factors</p>
                <p><strong>Result:</strong> Interpretable model with 10-15 key factors</p>
            </div>
        </div>

        <h2 style="text-align: center; color: #667eea; margin: 40px 0;">‚ö†Ô∏è Common Pitfalls & Solutions</h2>

        <div class="warning-box">
            <h3>‚ö†Ô∏è Pitfall 1: Using Same Œª for All Features</h3>
            <p><strong>Problem:</strong> Features with different scales get penalized differently</p>
            <p><strong>Solution:</strong> Always standardize/normalize features before regularization!</p>
        </div>

        <div class="warning-box">
            <h3>‚ö†Ô∏è Pitfall 2: Choosing Œª Based on Training Data</h3>
            <p><strong>Problem:</strong> Overfitting to training set</p>
            <p><strong>Solution:</strong> Use cross-validation to select Œª</p>
        </div>

        <div class="warning-box">
            <h3>‚ö†Ô∏è Pitfall 3: Too Much Regularization</h3>
            <p><strong>Problem:</strong> Underfitting (model too simple)</p>
            <p><strong>Solution:</strong> Start with small Œª and increase gradually</p>
        </div>

        <h2 style="text-align: center; color: #667eea; margin: 40px 0;">üéì Key Takeaways</h2>

        <div class="success-box">
            <h3>‚úÖ Remember These Points:</h3>
            <ol style="line-height: 2;">
                <li><strong>Regularization = Simplicity Preference:</strong> Adds penalty for complex models</li>
                <li><strong>L1 (Lasso) = Feature Selection:</strong> Makes weights exactly zero</li>
                <li><strong>L2 (Ridge) = Weight Shrinkage:</strong> Reduces all weights proportionally</li>
                <li><strong>Elastic Net = Best of Both:</strong> Combines L1 and L2</li>
                <li><strong>Œª (Lambda) Controls Strength:</strong> Higher Œª = simpler model</li>
                <li><strong>Always Standardize First:</strong> Put features on same scale</li>
                <li><strong>Use Cross-Validation:</strong> To find optimal Œª</li>
                <li><strong>Monitor Both Errors:</strong> Training AND validation/test</li>
            </ol>
        </div>

        <div class="interactive-demo" style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);">
            <h2 style="color: white;">üß† Quick Mental Model</h2>
            <div style="color: white; font-size: 1.2em; margin-top: 20px;">
                <p><strong>Think of regularization like a speed limit for learning:</strong></p>
                <p style="margin-top: 20px;">
                    üöó No regularization = No speed limit (can overfit/crash)<br>
                    üöô Moderate regularization = Safe speed (optimal performance)<br>
                    üêå Too much regularization = Too slow (underfitting)
                </p>
            </div>
        </div>

        <div class="concept-box">
            <h2 style="text-align: center;">üìù Interview Questions</h2>
            
            <div style="margin-top: 30px;">
                <h4>Q1: "Why does L1 create sparse models while L2 doesn't?"</h4>
                <p style="margin-top: 10px; padding: 15px; background: white; border-radius: 10px;">
                    <strong>Answer:</strong> L1's absolute value penalty creates "sharp corners" in the constraint space (diamond shape), 
                    making it more likely for the optimization to hit these corners where weights are exactly zero. 
                    L2's squared penalty creates smooth circular constraints, only shrinking weights toward zero but never reaching it.
                </p>
            </div>
            
            <div style="margin-top: 20px;">
                <h4>Q2: "How do you choose between L1 and L2 regularization?"</h4>
                <p style="margin-top: 10px; padding: 15px; background: white; border-radius: 10px;">
                    <strong>Answer:</strong> Use L1 when you need feature selection or interpretability (e.g., identifying important genes). 
                    Use L2 when all features are relevant but you want to prevent large weights (e.g., image pixels). 
                    Use Elastic Net when you have correlated features or high-dimensional data.
                </p>
            </div>
            
            <div style="margin-top: 20px;">
                <h4>Q3: "What happens if Œª is too large?"</h4>
                <p style="margin-top: 10px; padding: 15px; background: white; border-radius: 10px;">
                    <strong>Answer:</strong> The model becomes too simple and underfits. With very large Œª, 
                    the penalty term dominates the loss function, forcing all weights toward zero, 
                    essentially ignoring the training data and failing to capture even the true patterns.
                </p>
            </div>
        </div>
    </div>

    <script>
        // Initialize chart
        const ctx = document.getElementById('regChart').getContext('2d');
        let chart;
        
        // Generate initial data points
        function generateData(complexity) {
            const x = [];
            const yTrue = [];
            const yNoisy = [];
            
            for (let i = 0; i < 20; i++) {
                const xVal = (i / 19) * 10 - 5;
                x.push(xVal);
                const trueVal = 2 * Math.sin(xVal) + xVal * 0.5;
                yTrue.push(trueVal);
                yNoisy.push(trueVal + (Math.random() - 0.5) * 2);
            }
            
            return { x, yTrue, yNoisy };
        }
        
        // Generate fitted curve based on regularization
        function generateFittedCurve(x, yNoisy, lambda) {
            const fitted = [];
            const complexity = Math.max(1, 10 - lambda / 10);
            
            for (let i = 0; i < x.length; i++) {
                if (lambda < 20) {
                    // Complex model (overfitting)
                    let val = yNoisy[i];
                    if (i > 0 && i < x.length - 1) {
                        val = (yNoisy[i-1] * 0.1 + yNoisy[i] * 0.8 + yNoisy[i+1] * 0.1) * (1 - lambda/100);
                        val += yNoisy[i] * (lambda/100);
                    }
                    fitted.push(val);
                } else if (lambda < 60) {
                    // Balanced model
                    const smoothing = lambda / 50;
                    let val = yNoisy[i] * (1 - smoothing);
                    if (i > 0 && i < x.length - 1) {
                        val += (yNoisy[i-1] + yNoisy[i] + yNoisy[i+1]) / 3 * smoothing;
                    }
                    fitted.push(val);
                } else {
                    // Simple model (approaching straight line)
                    const linearity = (lambda - 60) / 40;
                    const linearFit = x[i] * 0.5;
                    fitted.push(yNoisy[i] * (1 - linearity) + linearFit * linearity);
                }
            }
            
            return fitted;
        }
        
        // Initialize chart with data
        const data = generateData();
        
        function createChart(lambda = 0) {
            const fittedCurve = generateFittedCurve(data.x, data.yNoisy, lambda);
            
            const chartData = {
                datasets: [
                    {
                        label: 'Training Data',
                        data: data.x.map((x, i) => ({ x, y: data.yNoisy[i] })),
                        backgroundColor: '#3498db',
                        borderColor: '#3498db',
                        showLine: false,
                        pointRadius: 6
                    },
                    {
                        label: 'True Function',
                        data: data.x.map((x, i) => ({ x, y: data.yTrue[i] })),
                        borderColor: '#27ae60',
                        backgroundColor: 'transparent',
                        borderWidth: 2,
                        pointRadius: 0,
                        borderDash: [5, 5]
                    },
                    {
                        label: 'Fitted Model',
                        data: data.x.map((x, i) => ({ x, y: fittedCurve[i] })),
                        borderColor: '#e74c3c',
                        backgroundColor: 'transparent',
                        borderWidth: 3,
                        pointRadius: 0
                    }
                ]
            };
            
            if (chart) {
                chart.destroy();
            }
            
            chart = new Chart(ctx, {
                type: 'scatter',
                data: chartData,
                options: {
                    responsive: true,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Effect of Regularization on Model Fit',
                            font: { size: 16 }
                        },
                        legend: {
                            display: true
                        }
                    },
                    scales: {
                        x: {
                            type: 'linear',
                            position: 'bottom',
                            title: {
                                display: true,
                                text: 'Input Feature'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Target Value'
                            }
                        }
                    }
                }
            });
        }
        
        // Slider functionality
        const slider = document.getElementById('regSlider');
        const lambdaDisplay = document.getElementById('lambdaValue');
        const trainError = document.getElementById('trainError');
        const testError = document.getElementById('testError');
        const complexityDisplay = document.getElementById('complexity');
        
        slider.addEventListener('input', function() {
            const lambda = parseFloat(this.value);
            lambdaDisplay.textContent = `Œª = ${(lambda / 10).toFixed(2)}`;
            
            // Update chart
            createChart(lambda);
            
            // Update metrics
            if (lambda < 20) {
                // Overfitting regime
                trainError.textContent = (0.05 + lambda * 0.002).toFixed(3);
                testError.textContent = (0.35 - lambda * 0.01).toFixed(3);
                complexityDisplay.textContent = 'High';
                testError.style.color = '#e74c3c';
            } else if (lambda < 60) {
                // Optimal regime
                trainError.textContent = (0.08 + lambda * 0.001).toFixed(3);
                testError.textContent = (0.15 - (lambda - 40) * 0.002).toFixed(3);
                complexityDisplay.textContent = 'Balanced';
                testError.style.color = '#27ae60';
            } else {
                // Underfitting regime
                trainError.textContent = (0.15 + lambda * 0.002).toFixed(3);
                testError.textContent = (0.15 + (lambda - 60) * 0.003).toFixed(3);
                complexityDisplay.textContent = 'Low';
                testError.style.color = '#f39c12';
            }
        });
        
        // Initialize chart on load
        createChart(0);
    </script>
</body>
</html>
